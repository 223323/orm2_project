TODO:
	+ client (basic sending packets)
	+ server (basic receiving packets)
	+ data queue
	+ tinycthread multi threading
	+ listen
	+ test sending packet by make_packet
	+ make simple send_packet function (auto detect source mac, source ip)
	+ checksum function (crc32)
	+ test receiving packets (pcap_loop or pcap_next)
	+ design packets for transfer
	+ validate_packet (checking whether packet is valid and can be processed) network_layers.c
		+ checksum validations
	+ try_open_device devices.c
	- implement method with only ethernet
	+ implement copying important data from alldevs( d ) to dev_context
	+ show information about transfer speed and progress percentage
	+ consistent print status of all devices
	+ ip validation
	- port validation
	+ add control packet (control how much packets to send before waiting for ack,
		client will dictate based on rate of packet losses, function of last packet
		loss time)
	+ send multiple packets before receiving 1 ack for all of them in single packet

main:
	+ server
	+ client

BUGS:
	+ data not received correctly
	+ program not closed on transfer complete
	+ statistics device names gets nulled
	+ too much packet losses and disconnections
	+ double free
	+ wifi usb doesn't resume download
	+ client big files not working
	+ server big files not working
	+ server gets wrong extension string

plan:
	+ device name wish list with given dmac, dip, dport
	+ when device is disconnected use loop with sleep to periodically check whether
		it can be opened
	+ shared thread context { mutex, FILE **f, ... }
	+ specific thread context
	+ fix connected, disconnected philosophy
		disconnected on not getting ack
		connected on receiving ack

